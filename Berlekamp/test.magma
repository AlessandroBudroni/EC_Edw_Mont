/**
 *
 * LICENSE
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// Test Berlekamp

load"berlekamp.magma";
for i in [1..500] do
	p:=RandomPrime(4);
	q:=p^(Random([2..10]));
	P<x>:=PolynomialRing(GF(q));
	m:=Random([2..20]);
	c:=[Random(GF(q)): i in [1..m]];
	f:=P!c;
	while Degree(P!f) lt 1 do
		m:=Random([2..20]);
		c:=[Random(q-1): i in [1..m]];
	f:=P!c;
	end while; 
	if Berlekamp(f) ne Factorization(f) then 
		printf "\nTest failed: f: %o q: %o\n", f, q;
	end if;
end for;